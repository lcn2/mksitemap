#!/usr/bin/env bash
#
# mksitemap - make a sitemap for a web tree
#
# Copyright (c) 2024 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll, http://www.isthe.com/chongo/index.html) /\oo/\
#
# Share and enjoy! :-)

# firewall - run only with a bash that is version 5.1.8 or later
#
# The "/usr/bin/env bash" command must result in using a bash that
# is version 5.1.8 or later.
#
# We could relax this version and insist on version 4.2 or later.  Versions
# of bash between 4.2 and 5.1.7 might work.  However, to be safe, we will require
# bash version 5.1.8 or later.
#
# WHY 5.1.8 and not 4.2?  This safely is done because macOS Homebrew bash we
# often use is "version 5.2.26(1)-release" or later, and the RHEL Linux bash we
# use often use is "version 5.1.8(1)-release" or later.  These versions are what
# we initially tested.  We recommend you either upgrade bash or install a newer
# version of bash and adjust your $PATH so that "/usr/bin/env bash" finds a bash
# that is version 5.1.8 or later.
#
# NOTE: The macOS shipped, as of 2024 March 15, a version of bash is something like
#	bash "version 3.2.57(1)-release".  That macOS shipped version of bash
#	will NOT work.  For users of macOS we recommend you install Homebrew,
#	(see https://brew.sh), and then run "brew install bash" which will
#	typically install it into /opt/homebrew/bin/bash, and then arrange your $PATH
#	so that "/usr/bin/env bash" finds "/opt/homebrew/bin" (or whatever the
#	Homebrew bash is).
#
# NOTE: And while MacPorts might work, we noticed a number of subtle differences
#	with some of their ported tools to suggest you might be better off
#	with installing Homebrew (see https://brew.sh).  No disrespect is intended
#	to the MacPorts team as they do a commendable job.  Nevertheless we ran
#	into enough differences with MacPorts environments to suggest you
#	might find a better experience with this tool under Homebrew instead.
#
if [[ -z ${BASH_VERSINFO[0]} ||
	 ${BASH_VERSINFO[0]} -lt 5 ||
	 ${BASH_VERSINFO[0]} -eq 5 && ${BASH_VERSINFO[1]} -lt 1 ||
	 ${BASH_VERSINFO[0]} -eq 5 && ${BASH_VERSINFO[1]} -eq 1 && ${BASH_VERSINFO[2]} -lt 8 ]]; then
    echo "$0: ERROR: bash version needs to be >= 5.1.8: $BASH_VERSION" 1>&2
    echo "$0: Warning: bash version >= 4.2 might work but 5.1.8 was the minimum we tested" 1>&2
    echo "$0: Notice: For macOS users: install Homebrew (see https://brew.sh), then run" \
	 ""brew install bash" and then modify your \$PATH so that \"#!/usr/bin/env bash\"" \
	 "finds the Homebrew installed (usually /opt/homebrew/bin/bash) version of bash" 1>&2
    exit 4
fi


# setup bash file matching
#
# We must declare arrays with -ag or -Ag, and we need loops to "export" modified variables.
# This requires a bash with a version 4.2 or later.  See the larger comment above about bash versions.
#
shopt -s nullglob	# enable expanded to nothing rather than remaining unexpanded
shopt -u failglob	# disable error message if no matches are found
shopt -u dotglob	# disable matching files starting with .
shopt -u nocaseglob	# disable strict case matching
shopt -u extglob	# enable extended globbing patterns
shopt -s globstar	# enable ** to match all files and zero or more directories and subdirectories

# set variables referenced in the usage message
#
export VERSION="1.0 2024-06-14"
NAME=$(basename "$0")
export NAME
export V_FLAG=0
GIT_TOOL=$(type -P git)
export GIT_TOOL
if [[ -z "$GIT_TOOL" ]]; then
    echo "$0: FATAL: git tool is not installed or not in \$PATH" 1>&2
    exit 5
fi
"$GIT_TOOL" rev-parse --is-inside-work-tree >/dev/null 2>&1
status="$?"
if [[ $status -eq 0 ]]; then
    TOPDIR=$("$GIT_TOOL" rev-parse --show-toplevel)
fi
export TOPDIR
export MODTIME_METHOD=""


# output_modtime - file modification time in W3C Datetime format:
#
#       https://www.w3.org/TR/NOTE-datetime
#
# for use in XML format for sitemaps:
#
#       https://www.sitemaps.org/protocol.html
#
# usage:
#       output_modtime filename
#
function output_modtime
{
    local FILENAME;	# filename argument

    # parse args
    #
    if [[ $# -ne 1 ]]; then
        echo "$0: ERROR: in output_modtime: expected 1 arg, found $#" 1>&2
        return 1
    fi
    FILENAME="$1"

    # produce output given the MODTIME_METHOD
    #
    case "$MODTIME_METHOD" in

    # macOS stat
    #
    macos_stat)
	TZ=UTC stat -f '%Sm' -t '%FT%T+00:00' "$FILENAME"
	status="$?"
	if [[ $status -ne 0 ]]; then
	    echo "$0: ERROR: in output_modtime:" \
		 "TZ=UTC stat -f '%Sm' -t '%FT%T+00:00' $FILENAME failed, error code: $status" 1>&2
	    exit 8
	fi
	;;

    # RHEL Linux stat
    #
    RHEL_stat)
	TZ=UTC stat -c '%y' "$FILENAME" | sed -e 's/ /T/' -e 's/\.[0-9]* //' -e 's/\([0-9][0-9]\)$/:&/'
	status0="${PIPESTATUS[0]}"
	status1="${PIPESTATUS[1]}"
	if [[ $status0 -ne 0 || $status1 -ne 0 ]]; then
	    echo "$0: ERROR: in output_modtime:" \
		 "TZ=UTC stat -c '%y' $FILENAME | sed .. failed, error codes: $status0 and $status1" 1>&2
	    exit 8
	fi
	;;

    ls_D)
	# We want to look at the format of ls -D, not find
	#
	# SC2012 (info): Use find instead of ls to better handle non-alphanumeric filenames.
	# https://www.shellcheck.net/wiki/SC2012
	# shellcheck disable=SC2012
	TZ=UTZ ls -D '%FT%T+00:00' -ld "$FILENAME" | awk '{print $6;}'
	status0="${PIPESTATUS[0]}"
	status1="${PIPESTATUS[1]}"
	if [[ $status0 -ne 0 || $status1 -ne 0 ]]; then
	    echo "$0: ERROR: in output_modtime:" \
		 "TZ=UTZ ls -D '%FT%T+00:00' -ld $FILENAME | awk .. failed, error codes: $status0 and $status1" 1>&2
	    exit 8
	fi
	;;

    *) echo "0: in output_modtime: unknown MODTIME_METHOD value: $MODTIME_METHOD" 1>&2
	exit 8
	;;
    esac
    return 0
}

# set usage message
#
export USAGE="usage: $0 [-h] [-v level] [-V] [-N] topdir site_url

	-h		print help message and exit
	-v level	set verbosity level (def level: 0)
	-V		print version string and exit

	-n		go thru the actions, but do not update any files (def: do the action)
	-N		do not process file, just parse arguments and ignore the file (def: process the file)

	topdir		set topdir
	site_url	Base URL of the website

Exit codes:
     0         all OK
     2         -h and help string printed or -V and version string printed
     3         command line error
     4         bash version is too old
     5	       some internal tool is not found or not an executable file
     6	       unable to cd or topdir is not a directory
     7	       file under topdir is not a readable file
     8	       unable to determine a method to find the modification time of a file in W3C Datefile format
 >= 10         internal error

$NAME version: $VERSION"

# setup
#
export NOOP=
export DO_NOT_PROCESS=

# parse command line
#
while getopts :hv:Vd:nN flag; do
  case "$flag" in
    h) echo "$USAGE" 1>&2
	exit 2
	;;
    v) V_FLAG="$OPTARG"
	;;
    V) echo "$VERSION"
	exit 2
	;;
    n) NOOP="-n"
	;;
    N) DO_NOT_PROCESS="-N"
	;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
	echo 1>&2
	print_usage 1>&2
	exit 3
	;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
	echo 1>&2
	echo "$USAGE" 1>&2
	exit 3
	;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
	echo 1>&2
	echo "$USAGE" 1>&2
	exit 3
	;;
  esac
done

# parse the command line arguments
#
if [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: debug level: $V_FLAG" 1>&2
fi
#
shift $(( OPTIND - 1 ));
#
if [[ $V_FLAG -ge 5 ]]; then
    echo "$0: debug[5]: file argument count: $#" 1>&2
fi
if [[ $# -ne 2 ]]; then
    echo "$0: ERROR: expected 2 args, found: $#" 1>&2
    echo "$USAGE" 1>&2
    exit 3
fi
#
export TOPDIR="$1"
export SITE_URL="$2"

# cd to topdir
#
if [[ ! -e $TOPDIR ]]; then
    echo "$0: ERROR: cannot cd to non-existent path: $TOPDIR" 1>&2
    exit 6
fi
if [[ ! -d $TOPDIR ]]; then
    echo "$0: ERROR: cannot cd to a non-directory: $TOPDIR" 1>&2
    exit 6
fi
export CD_FAILED
if [[ $V_FLAG -ge 5 ]]; then
    echo "$0: debug[5]: about to: cd $TOPDIR" 1>&2
fi
cd "$TOPDIR" || CD_FAILED="true"
if [[ -n $CD_FAILED ]]; then
    echo "$0: ERROR: cd $TOPDIR failed" 1>&2
    exit 6
fi
if [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
fi

# determine the name of sitemap
#
export SITEMAP="sitemap.xml"
export SITEMAP_GZ="sitemap.xml.gz"

# determine how we can determine the file modification time in W3C Datetime format:
#
#	https://www.w3.org/TR/NOTE-datetime
#
# for use in XML format for sitemaps:
#
#	https://www.sitemaps.org/protocol.html
#
# Unfortunately there is NO single widely available, but simple command produce a modification
# time in W3C Datetime format.  At best we can try one of several methods in the hopes that
# we can find a method for the system in question.
#
# We will attempt to find the modification time in W3C Datetime of the .top file.
#
# Try macOS stat:
#
#	TZ=UTC stat -f '%Sm' -t '%FT%T+00:00' filename
#
TZ=UTC stat -f '%Sm' -t '%FT%T+00:00' index.html > /dev/null 2>&1
status="$?"
if [[ $status -eq 0 ]]; then
    MODTIME_METHOD="macos_stat"
    if [[ $V_FLAG -ge 5 ]]; then
        echo "$0: debug[5]: TZ=UTC stat -f '%Sm' -t '%FT%T+00:00' works, MODTIME_METHOD: $MODTIME_METHOD" 1>&2
    fi

else

    # Try RHEL Linux stat:
    #
    #	TZ=UTC stat -c '%y' faq.md | sed -e 's/ /T/' -e 's/\.[0-9]* //' -e 's/\([0-9][0-9]\)$/:&/'
    #
    # NOTE: We only need to test the stat command.
    #
    TZ=UTC stat -c '%y' index.html > /dev/null 2>&1
    status="$?"
    if [[ $status -eq 0 ]]; then
	MODTIME_METHOD="RHEL_stat"
	if [[ $V_FLAG -ge 5 ]]; then
	    echo "$0: debug[5]: TZ=UTC stat -c '%y' works, MODTIME_METHOD: $MODTIME_METHOD" 1>&2
	fi

    else

	# Try ls -D:
	#
	#	TZ=UTZ ls -D '%FT%T+00:00' -ld
	#
	TZ=UTZ ls -D '%FT%T+00:00' -ld index.html > /dev/null 2>&1
	status="$?"
	if [[ $status -eq 0 ]]; then
	    MODTIME_METHOD="ls_D"
	    if [[ $V_FLAG -ge 5 ]]; then
		echo "$0: debug[5]: TZ=UTZ ls -D '%FT%T+00:00' -ld works, MODTIME_METHOD: $MODTIME_METHOD" 1>&2
	    fi

	else
	    echo "$0: ERROR: we cannot determine how to form a file modification time in W3C Datetime formt" 1>&2
	    exit 8
	fi
    fi
fi

# parameter debugging
#
if [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: VERSION=$VERSION" 1>&2
    echo "$0: debug[3]: NAME=$NAME" 1>&2
    echo "$0: debug[3]: V_FLAG=$V_FLAG" 1>&2
    echo "$0: debug[3]: GIT_TOOL=$GIT_TOOL" 1>&2
    echo "$0: debug[3]: TOPDIR=$TOPDIR" 1>&2
    echo "$0: debug[3]: SITE_URL=$SITE_URL" 1>&2
    echo "$0: debug[3]: MODTIME_METHOD=$MODTIME_METHOD" 1>&2
    echo "$0: debug[3]: NOOP=$NOOP" 1>&2
    echo "$0: debug[3]: DO_NOT_PROCESS=$DO_NOT_PROCESS" 1>&2
    echo "$0: debug[3]: CD_FAILED=$CD_FAILED" 1>&2
    echo "$0: debug[3]: SITEMAP=$SITEMAP" 1>&2
    echo "$0: debug[3]: SITEMAP_GZ=$SITEMAP_GZ" 1>&2
fi

# If -N, time to exit
#
if [[ -n $DO_NOT_PROCESS ]]; then
    if [[ $V_FLAG -ge 1 ]]; then
	echo "$0: debug[1]: arguments parsed, -N given, exit 0" 1>&2
    fi
    exit 0
fi

# create a temporary file manifest list
#
export TMP_MANIFEST_LIST=".tmp.$NAME.MANIFEST_LIST.$$.tmp"
if [[ $V_FLAG -ge 3 ]]; then
    echo  "$0: debug[3]: temporary file manifest list: $TMP_MANIFEST_LIST" 1>&2
fi
trap 'rm -f $TMP_MANIFEST_LIST; exit' 0 1 2 3 15
rm -f "$TMP_MANIFEST_LIST"
if [[ -e $TMP_MANIFEST_LIST ]]; then
    echo "$0: ERROR: cannot remove temporary file manifest list: $TMP_MANIFEST_LIST" 1>&2
    exit 10
fi
:> "$TMP_MANIFEST_LIST"
if [[ ! -e $TMP_MANIFEST_LIST ]]; then
    echo "$0: ERROR: cannot create temporary file manifest list: $TMP_MANIFEST_LIST" 1>&2
    exit 11
fi

# create a temporary sitemap
#
export TMP_SITEMAP=".tmp.$NAME.SITEMAP.$$.tmp"
if [[ $V_FLAG -ge 3 ]]; then
    echo  "$0: debug[3]: temporary tarball: $TMP_SITEMAP" 1>&2
fi
trap 'rm -f $TMP_MANIFEST_LIST $TMP_SITEMAP; exit' 0 1 2 3 15
rm -f "$TMP_SITEMAP"
if [[ -e $TMP_SITEMAP ]]; then
    echo "$0: ERROR: cannot remove temporary tarball: $TMP_SITEMAP" 1>&2
    exit 12
fi
:> "$TMP_SITEMAP"
if [[ ! -e $TMP_SITEMAP ]]; then
    echo "$0: ERROR: cannot create temporary tarball: $TMP_SITEMAP" 1>&2
    exit 13
fi

# create a temporary sitemap.gz
#
export TMP_SITEMAP_GZ=".tmp.$NAME.SITEMAP_GZ.$$.tmp"
if [[ $V_FLAG -ge 3 ]]; then
    echo  "$0: debug[3]: temporary gzipped tarball: $TMP_SITEMAP_GZ" 1>&2
fi
trap 'rm -f $TMP_MANIFEST_LIST $TMP_SITEMAP $TMP_SITEMAP_GZ; exit' 0 1 2 3 15
rm -f "$TMP_SITEMAP_GZ"
if [[ -e $TMP_SITEMAP_GZ ]]; then
    echo "$0: ERROR: cannot remove gzipped temporary tarball: $TMP_SITEMAP_GZ" 1>&2
    exit 14
fi
:> "$TMP_SITEMAP_GZ"
if [[ ! -e $TMP_SITEMAP_GZ ]]; then
    echo "$0: ERROR: cannot create gzipped temporary tarball: $TMP_SITEMAP_GZ" 1>&2
    exit 15
fi

# generate the manifest list
#
find . \( \
	  -name '.*' \
	  -name ads.txt -o \
	  -name .DS_Store -o \
	  -name for-you-only -o \
	  -name .github -o \
	  -name .gitignore -o \
	  -name .git -o \
	  -name 'google[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f].html' -o \
	  -name .htaccess -o \
	  -name NOTES -o \
	  -name private -o \
	  -name RCS -o \
	  -name sitemap.xml.gz -o \
	  -name sitemap.xml -o \
	  -name '.tmp.*' -o \
	  -name TO-BE-USED -o \
	  -name UNUSED -o \
	  -name '*,v' -o \
	  -name wsrc \
       \) -prune -o -type f -printf '%P\n' > "$TMP_MANIFEST_LIST"
status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: find . ... failed, error: $status" 1>&2
    exit 16
fi
if [[ ! -s $TMP_MANIFEST_LIST ]]; then
    echo "$0: ERROR: temporary file manifest list is not a non-empty file: $TMP_MANIFEST_LIST" 1>&2
    exit 17
fi

# sort the manifest list
#
LC_ALL=C sort -d "$TMP_MANIFEST_LIST" -o "$TMP_MANIFEST_LIST"
status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: LC_ALL=C sort -d $TMP_MANIFEST_LIST -o $TMP_MANIFEST_LIST failed, error: $status" 1>&2
    exit 18
fi
if [[ ! -s $TMP_MANIFEST_LIST ]]; then
    echo "$0: ERROR: sorted temporary file manifest list is not a non-empty file: $TMP_MANIFEST_LIST" 1>&2
    exit 19
fi

# verify that the manifest list contains only readable files
#
for FILE in $(< "$TMP_MANIFEST_LIST"); do

    if [[ ! -e $FILE ]]; then
	if [[ -z $CAP_W_FLAG_FOUND ]]; then
	    echo "$0: ERROR: file does not exist: $FILE" 1>&2
	else
	    echo "$0: Warning: file does not exist: $FILE" 1>&2
	fi
	exit 7
    fi
    if [[ ! -f $FILE ]]; then
	if [[ -z $CAP_W_FLAG_FOUND ]]; then
	    echo "$0: ERROR: is not a file: $FILE" 1>&2
	else
	    echo "$0: Warning: is not a file: $FILE" 1>&2
	fi
	exit 7
    fi
    if [[ ! -r $FILE ]]; then
	if [[ -z $CAP_W_FLAG_FOUND ]]; then
	    echo "$0: ERROR: is not a readable file: $FILE" 1>&2
	else
	    echo "$0: Warning: is not a readable file: $FILE" 1>&2
	fi
	exit 7
    fi

done

# form the sitemap
#
if [[ -z $NOOP ]]; then

    # debug
    #
    if [[ $V_FLAG -ge 1 ]]; then
	echo "$0: debug[1]: about to form a sitemap: $TMP_SITEMAP" 1>&2
    fi

    # output the XML header
    #
    # We just want to echo twice.
    #
echo EOF >> "$TMP_SITEMAP"
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"
    xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
EOF

    # output XML for each file in the manifest, in sorted filepath order
    #
    LC_ALL=C sort -d -f -t / "$TMP_MANIFEST_LIST" | while read -r FILE_PATH; do
	LASTMOD=$(output_modtime "$FILE_PATH")
	export LASTMOD
	echo '    <url>'
	echo "	<loc>$SITE_URL/$FILE_PATH</loc>"
	echo "	<lastmod>$LASTMOD</lastmod>"
	echo '    </url>'
    done >>  "$TMP_SITEMAP"

    # output the XML trailer
    #
    echo '</urlset>' >> "$TMP_SITEMAP"

    # verify the sitemap is not empty
    #
    if [[ ! -s $TMP_SITEMAP ]]; then
	echo "$0: ERROR: tarball is missing os empty: $TMP_SITEMAP" 1>&2
	exit 8
    fi

# case: -n
#
elif [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: because of -n, did not form sitemap: $TMP_SITEMAP" 1>&2
fi

# move the sitemap in place only if different
#
if [[ -z $NOOP ]]; then
    if cmp -s "$TMP_SITEMAP" "$SITEMAP"; then

	# case: tarball did not change
	#
	if [[ $V_FLAG -ge 5 ]]; then
	    echo "$0: debug[5]: file did not change: $SITEMAP" 1>&2
	fi

    else

	# case: tarball changed, update the file
	#
	if [[ $V_FLAG -ge 5 ]]; then
	    echo "$0: debug[5]: mv -f -- $TMP_SITEMAP $SITEMAP" 1>&2
	fi
	if [[ $V_FLAG -ge 3 ]]; then
	    mv -f -v -- "$TMP_SITEMAP" "$SITEMAP"
	    status="$?"
	else
	    mv -f -- "$TMP_SITEMAP" "$SITEMAP"
	    status="$?"
	fi
	if [[ status -ne 0 ]]; then
	    echo "$0: ERROR: mv -f -- $TMP_SITEMAP $SITEMAP filed, error code: $status" 1>&2
	    exit 8
	elif [[ $V_FLAG -ge 1 ]]; then
	    echo "$0: debug[1]: built replaced HTML file: $SITEMAP" 1>&2
	fi
	if [[ ! -s $SITEMAP ]]; then
	    echo "$0: ERROR: not a non-empty index HTML file: $SITEMAP" 1>&2
	    exit 8
	fi
    fi

    # form the zipped sitemap file
    #
    gzip -f -q --best < "$SITEMAP" > "$TMP_SITEMAP_GZ"
    status="$?"
    if [[ $status -ne 0 ]]; then
	echo "$0: ERROR: gzip -f -q --best < $SITEMAP > $TMP_SITEMAP_GZ failed, error: $status" 1>&2
	exit 20
    fi
    if [[ $V_FLAG -ge 3 ]]; then
	mv -f -v "$TMP_SITEMAP_GZ" "$SITEMAP_GZ"
	status="$?"
    else
	mv -f "$TMP_SITEMAP_GZ" "$SITEMAP_GZ"
	status="$?"
    fi
    if [[ $status -ne 0 ]]; then
	echo "$0: ERROR: mv -f $TMP_SITEMAP_GZ $SITEMAP_GZ  failed, error: $status" 1>&2
	exit 21
    elif [[ $V_FLAG -ge 1 ]]; then
	echo "$0: debug[1]: built replaced HTML file: $SITEMAP_GZ" 1>&2
    fi

elif [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: because of -n, temporary file manifest list was not formed: $TMP_MANIFEST_LIST" 1>&2
fi

# All Done!!! -- Jessica Noll, Age 2
#
if [[ -z $NOOP ]]; then
    rm -f "$TMP_MANIFEST_LIST" "$TMP_SITEMAP" "$TMP_SITEMAP_GZ"
elif [[ $V_FLAG -ge 1 ]]; then
    echo  "$0: debug[1]: -n disabled execution of: rm -f $TMP_MANIFEST_LIST $TMP_SITEMAP $TMP_SITEMAP_GZ" 1>&2
fi
exit 0
